{"version":3,"sources":["components/Calc/Probability/Probability.module.css","components/common/CardSelection/CardSelection.module.css","components/Calc/YourHand/YourHand.module.css","components/Calc/Calc.module.css","components/common/CardIMG/CardIMG.module.css","assets/images/cards.jpg","components/common/ClearBTN/ClearBTN.module.css","components/common/CardIMG/CardIMG.jsx","components/common/CardIMG/CardIMGContainer.jsx","components/Calc/CommunityCards/Card/Card.jsx","redux/reducers/calc-reducer.js","components/Calc/CommunityCards/Card/CardContainer.jsx","components/common/CardSelection/CardValue/CardValue.jsx","components/common/CardSelection/CardValue/CardValueContainer.jsx","components/common/CardSelection/CardSuit/CardSuit.jsx","components/common/CardSelection/CardSuit/CardSuiteContainer.jsx","components/common/CardSelection/CardSelection.jsx","components/common/CardSelection/CardSelectionContainer.jsx","components/common/ClearBTN/ClearBTN.jsx","components/common/ClearBTN/ClearBTNContainer.jsx","components/Calc/CommunityCards/CommunityCards.jsx","components/Calc/CommunityCards/CommunityCardsContainer.jsx","components/Calc/YourHand/Card/Card.jsx","components/Calc/YourHand/Card/CardContainer.jsx","components/Calc/YourHand/YourHand.jsx","components/Calc/YourHand/YourHandContainer.jsx","components/Calc/Probability/Probability.jsx","components/Calc/Probability/ProbabilityContainer.jsx","components/Calc/Calc.jsx","components/Calc/CalcContainer.jsx","App.js","serviceWorker.js","redux/store.js","index.js","components/Calc/CommunityCards/CommunityCards.module.css"],"names":["module","exports","CardIMG","props","offset","cardId","className","s","card","active","style","backgroundImage","cardsImage","backgroundPositionX","CardIMGContainer","connect","state","Card","onClick","selectCard","setName","itemNumber","changeValue","changeSuit","Math","trunc","initialState","pokerHands","name","viewName","value","wins","currentProb","isCalculations","fullCardDeck","currentCardDeck","communityCards","set","activeItem","handCards","cardSelectionDialog","selectedValue","selectedSuit","visibleFor","raund","playersNumber","type","changeCard","updateCurrentDeck","clearPokerHandsData","updateProbabilities","gamesData","calcReducer","action","console","log","newState","cardDeck","i","push","pull","undefined","pullAll","concat","length","setNames","key","totalGames","round","mapDispatchToProps","CardContainer","CardValue","e","stopPropagation","CardValueContainer","CardSuit","currentSuit","cardValue","indexOf","CardSuiteContainer","calc","CardSelection","cardValues","cardSuites","closeCardSelectionDialog","tampCards","showRaund","cardSelection","close","cardSuits","CardSelectionContainer","ClearBTN","wrapper","clearCardSet","clearFor","children","ClearBTNContainer","CommunityCards","cards","cardsWrapper","activeBlock","clearBtn","CommunityCardsContainer","YourHand","YourHandContainer","Probability","getRandomInt","max","floor","random","cardTypes","boardCards","playerCards","playerId","High_Card","One_Pair","Two_Pair","Three_of_a_Kind","Straight","Flush","Full_House","Four_of_a_Kind","Straight_Flush","Royal_Flush","setupCards","getCard","communityCardSet","setupBoardCards","handCardSet","setupPlayerCards","addBoardCards","j","addPlayerCards","playGamesAsync","dispatcher","timers","playGame","level","game","pokerCalc","getHoldemWinner","compactCards","increase","hand","handInfo","setTimeout","clearTimeout","prevProps","prevState","snapshot","this","pokerHand","pokerHandName","selectOptions","selected","players","select","onChange","event","changePlayersNumber","target","baseProb","React","Component","ProbabilityContainer","Calc","initCardDeck","calcWrapper","copyrights","CalcContainer","App","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","getState","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7bc12369.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"baseProb\":\"Probability_baseProb__zinwV\",\"pokerHandName\":\"Probability_pokerHandName__3QcyD\",\"pokerHand\":\"Probability_pokerHand__Nfxp_\",\"players\":\"Probability_players__2b13S\",\"select\":\"Probability_select__xBno7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardSelection\":\"CardSelection_cardSelection__qWaGl\",\"cardValues\":\"CardSelection_cardValues__1PV_6\",\"cardSuits\":\"CardSelection_cardSuits__27poA\",\"close\":\"CardSelection_close__2JTPC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsWrapper\":\"YourHand_cardsWrapper__2K5GC\",\"raund\":\"YourHand_raund__ingLH\",\"wrapper\":\"YourHand_wrapper__rsuda\",\"clearBtn\":\"YourHand_clearBtn__2JpZC\",\"activeBlock\":\"YourHand_activeBlock__366vX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Calc_wrapper__2eoO1\",\"calcWrapper\":\"Calc_calcWrapper__1jgW5\",\"copyrights\":\"Calc_copyrights__3iauX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardIMG_card__1UNMM\",\"active\":\"CardIMG_active__2WiZw\"};","module.exports = __webpack_public_path__ + \"static/media/cards.a860bea4.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ClearBTN_wrapper__1olEx\"};","import React from 'react';\r\nimport s from './CardIMG.module.css'\r\nimport cardsImage from './../../../assets/images/cards.jpg'\r\n\r\nconst CardIMG = (props) => {\r\n\r\n    let offset = 0 - props.cardId *  42.51;\r\n\r\n    return (\r\n        <div\r\n            className={`${s.card} ${props.active && s.active}`}\r\n\r\n            style={{\r\n                backgroundImage: `url(${cardsImage})`,\r\n                backgroundPositionX: offset\r\n            }}>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardIMG;","import {connect} from \"react-redux\";\r\nimport CardIMG from \"./CardIMG\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nlet mapDispatchToProps = {\r\n\r\n};\r\n\r\nconst CardIMGContainer = connect(mapStateToProps, mapDispatchToProps)(CardIMG);\r\n\r\nexport default CardIMGContainer;","import React from 'react';\r\nimport CardIMGContainer from \"../../../common/CardIMG/CardIMGContainer\";\r\n//import s from '   '\r\n\r\nconst Card = (props) => {\r\n\r\n    let onClickHandler = () => {\r\n\r\n        props.selectCard(props.setName, props.itemNumber);\r\n        props.changeValue(props.cardId);\r\n        props.changeSuit( props.cardId === 0\r\n            ? 53\r\n            : ((props.cardId / 4) - Math.trunc(props.cardId / 4 - 0.25)) * 4 + 52);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='qwer' onClick={onClickHandler}>\r\n                <CardIMGContainer\r\n                    cardId={props.cardId}\r\n                    active={props.active}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import {pull, pullAll} from \"lodash\";\r\n\r\nconst INIT_CARD_DECK = 'INIT_CARD_DECK';\r\nconst SELECT_CARD = 'SELECT_CARD';\r\nconst CHANGE_VALUE = 'CHANGE_VALUE';\r\nconst CHANGE_SUIT = 'CHANGE_SUIT';\r\nconst CHANGE_CARD = 'CHANGE_CARD';\r\nconst CLOSE_CARD_SELECTION_DIALOG = 'CLOSE_CARD_SELECTION_DIALOG';\r\nconst TAMP_CARDS = 'TAMP_CARDS';\r\nconst UPDATE_CURRENT_DECK = 'UPDATE_CURRENT_DECK';\r\nconst SHOW_RAUND = 'SHOW_RAUND';\r\nconst CLEAR_CARD_SET = 'CLEAR_CARD_SET';\r\nconst UPDATE_PROBABILITIES = 'UPDATE_PROBABILITIES';\r\nconst CLEAR_POKER_HANDS_DATA = 'CLEAR_POKER_HANDS_DATA';\r\nconst CHANGE_PLAYERS_NUMBER= 'CHANGE_PLAYERS_NUMBER';\r\n\r\nlet initialState =\r\n    {\r\n        pokerHands: [\r\n            {name: 'totalGames'      ,viewName: 'totalGames'       , value: 0},\r\n            {name: 'base'            ,viewName: 'base'             , wins: 0, currentProb: \"-\"},\r\n            {name: 'High_Card'       ,viewName: 'High Card'        , wins: 0, currentProb: \"-\"},\r\n            {name: 'One_Pair'        ,viewName: 'One Pair'         , wins: 0, currentProb: \"-\"},\r\n            {name: 'Two_Pair'        ,viewName: 'Two Pair'         , wins: 0, currentProb: \"-\"},\r\n            {name: 'Three_of_a_Kind' ,viewName: 'Three of a Kind'  , wins: 0, currentProb: \"-\"},\r\n            {name: 'Straight'        ,viewName: 'Straight'         , wins: 0, currentProb: \"-\"},\r\n            {name: 'Flush'           ,viewName: 'Flush'            , wins: 0, currentProb: \"-\"},\r\n            {name: 'Full_House'      ,viewName: 'Full House'       , wins: 0, currentProb: \"-\"},\r\n            {name: 'Four_of_a_Kind'  ,viewName: 'Four of a Kind'   , wins: 0, currentProb: \"-\"},\r\n            {name: 'Straight_Flush'  ,viewName: 'Straight Flush'   , wins: 0, currentProb: \"-\"},\r\n            {name: 'Royal_Flush'     ,viewName: 'Royal Flush'      , wins: 0, currentProb: \"-\"}\r\n        ],\r\n\r\n        isCalculations: true,\r\n\r\n        fullCardDeck: [],\r\n        currentCardDeck: [],\r\n\r\n        communityCards: {\r\n            set: [],\r\n            activeItem: null\r\n        },\r\n\r\n        handCards: {\r\n            set: [],\r\n            activeItem: null\r\n        },\r\n\r\n        cardSelectionDialog: {\r\n            selectedValue: 49,\r\n            selectedSuit: 53,\r\n            visibleFor: null\r\n        },\r\n\r\n        raund: 'pre-flop',\r\n\r\n        playersNumber: 5\r\n\r\n    };\r\n\r\nconst calcReducer = (state = initialState, action) => {\r\n        switch (action.type) {\r\n            case INIT_CARD_DECK: {\r\n                console.log(`${action.type}`);\r\n                let newState = {\r\n                    ...state,\r\n                    fullCardDeck: (() => {\r\n                        let cardDeck = [];\r\n                        for (let i = 1; i <= 52; i++) cardDeck.push(i);\r\n                        return cardDeck;\r\n                    })()\r\n                };\r\n                newState.currentCardDeck = [...newState.fullCardDeck];\r\n                return newState;\r\n            }\r\n            case SELECT_CARD:\r\n                console.log(`${action.type} ${action.setName} ${action.itemNumber}`);\r\n                return {\r\n                    // Устанавливаем для выбранного набора активный элемент\r\n                    ...state,\r\n                    [action.setName]: {\r\n                        ...state[action.setName],\r\n                        activeItem: action.itemNumber\r\n                    },\r\n                    // Устанавливаем какой набор выбран\r\n                    cardSelectionDialog: {\r\n                        ...state.cardSelectionDialog,\r\n                        visibleFor: action.setName\r\n                    }\r\n                };\r\n            case CHANGE_VALUE:\r\n                console.log(`${action.type} ${action.cardId}`);\r\n                return {\r\n                    // Устанавливаем выбранный номинал карты для формы\r\n                    ...state,\r\n                    cardSelectionDialog: {\r\n                        ...state.cardSelectionDialog,\r\n                        selectedValue: action.cardId\r\n                    }\r\n                };\r\n            case CHANGE_SUIT:\r\n                console.log(`${action.type} ${action.cardId}`);\r\n                return {\r\n                    // Устанавливаем выбранную рубашку для формы\r\n                    ...state,\r\n                    cardSelectionDialog: {\r\n                        ...state.cardSelectionDialog,\r\n                        selectedSuit: action.cardId\r\n                    }\r\n                };\r\n            case CHANGE_CARD: {\r\n                console.log(`${action.type} ${action.cardId}`);\r\n                let newState = {\r\n                    ...state,\r\n                    [state.cardSelectionDialog.visibleFor]: {\r\n                        ...state[state.cardSelectionDialog.visibleFor],\r\n                        set: [\r\n                            ...state[state.cardSelectionDialog.visibleFor].set\r\n                        ]\r\n                    }\r\n                };\r\n\r\n                // Меняем номинал выбранной карты в наборе\r\n                newState[state.cardSelectionDialog.visibleFor]\r\n                    .set[state[state.cardSelectionDialog.visibleFor].activeItem - 1] = action.cardId;\r\n\r\n                //TEST UPDATE PROBABILITIES\r\n                ////////////////////////////////\r\n                newState.pokerHands = [...state.pokerHands];\r\n                newState.pokerHands[0] = {...state.pokerHands[0]};\r\n                newState.pokerHands[0].currentProb = 0;\r\n                //////////////////////////////\r\n                //END OF TEST UPDATE PROBABILITIES\r\n                return newState;\r\n            }\r\n            case CLOSE_CARD_SELECTION_DIALOG:\r\n                console.log(`${action.type}`);\r\n                return {\r\n                    // Сбрасываем выбранный набор\r\n                    ...state,\r\n                    cardSelectionDialog: {\r\n                        ...state.cardSelectionDialog,\r\n                        visibleFor: null\r\n                    }\r\n                };\r\n            case TAMP_CARDS: {\r\n                console.log(`${action.type}`);\r\n\r\n                let newState = {\r\n                    ...state,\r\n                    communityCards: {\r\n                        ...state.communityCards,\r\n                        set: [\r\n                            ...state.communityCards.set\r\n                        ],\r\n                        activeItem: null\r\n                    },\r\n                    handCards: {\r\n                        ...state.handCards,\r\n                        set: [\r\n                            ...state.handCards.set\r\n                        ],\r\n                        activeItem: null\r\n                    }\r\n                };\r\n\r\n                pull(newState.communityCards.set, 0, undefined);\r\n                pull(newState.handCards.set, 0, undefined);\r\n\r\n                return newState;\r\n            }\r\n            case UPDATE_CURRENT_DECK: {\r\n                console.log(`${action.type}`);\r\n                let newState = {\r\n                    ...state,\r\n                    currentCardDeck: [...state.fullCardDeck]\r\n                };\r\n                pullAll(newState.currentCardDeck, state.communityCards.set.concat(state.handCards.set));\r\n                return newState;\r\n            }\r\n            case SHOW_RAUND:\r\n                console.log(`${action.type}`);\r\n                return {\r\n                    ...state,\r\n                    raund: (() => {\r\n                        switch (state.communityCards.set.length) {\r\n                            case 3:\r\n                                return 'flop';\r\n                            case 4:\r\n                                return 'turn';\r\n                            case 5:\r\n                                return 'river';\r\n                            default:\r\n                                return 'pre-flop';\r\n                        }\r\n                    })()\r\n                };\r\n            case CLEAR_CARD_SET: {\r\n                console.log(`${action.type} ${action.setNames}`);\r\n\r\n                let newState = {\r\n                    ...state,\r\n                    communityCards: {...state.communityCards},\r\n                    handCards: {...state.handCards}\r\n                };\r\n\r\n                for (let i = 0; i < action.setNames.length; i++) {\r\n\r\n                    newState[action.setNames[i]].set = [];\r\n                    newState[action.setNames[i]].activeItem = null;\r\n                }\r\n\r\n                newState.isCalculations = true;\r\n\r\n                return newState;\r\n            }\r\n            case CLEAR_POKER_HANDS_DATA:{\r\n                console.log(`${action.type}`);\r\n                let newState = {\r\n                    ...state,\r\n                    pokerHands: [...state.pokerHands]\r\n                };\r\n\r\n                for (let i = 0; i < newState.pokerHands.length ; i++) newState.pokerHands[i] = {...state.pokerHands[i]};\r\n                for (let i = 0; i < newState.pokerHands.length ; i++) {\r\n                    i === 0\r\n                        ? newState.pokerHands[i].value = 0\r\n                        : newState.pokerHands[i].wins = 0;\r\n                    newState.pokerHands[i].currentProb = 0;\r\n                }\r\n\r\n                newState.isCalculations = true;\r\n                return newState;}\r\n            case UPDATE_PROBABILITIES: {\r\n                console.log(`${action.type} ${action.gamesData}`);\r\n                let newState = {\r\n                    ...state,\r\n                    pokerHands: [...state.pokerHands]\r\n                };\r\n\r\n                for (let i = 0; i <= 11 ; i++) {\r\n                    newState.pokerHands[i] = {...state.pokerHands[i]};\r\n                }\r\n\r\n                ///////////////////////\r\n\r\n                //Установка totalGames\r\n                newState.pokerHands[0].value += action.gamesData.totalGames;\r\n                if (newState.pokerHands[0].value >= 100000) newState.isCalculations = false;\r\n\r\n                //Подсчет base\r\n                for (let key in action.gamesData) {\r\n                    if (key !== 'totalGames') newState.pokerHands[1].wins += action.gamesData[key];\r\n                }\r\n\r\n                //Установка выйгрышей по рукам\r\n                for (let i = 2; i <= 11 ; i++) {\r\n                    for (let key in action.gamesData) {\r\n                        if (newState.pokerHands[i].name === key) newState.pokerHands[i].wins += action.gamesData[key];\r\n                    }\r\n                }\r\n\r\n                //Установка вероятностей\r\n                for (let i = 1; i <=11 ; i++) {\r\n                    newState.pokerHands[i].currentProb = Math.round(newState.pokerHands[i].wins / newState.pokerHands[0].value * 100);\r\n                }\r\n                return newState;\r\n            }\r\n            case CHANGE_PLAYERS_NUMBER:\r\n                return {\r\n                    ...state,\r\n                    playersNumber: action.playersNumber\r\n                };\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n;\r\n\r\nexport const initCardDeck = () =>\r\n    ({\r\n        type: INIT_CARD_DECK,\r\n    });\r\n\r\nexport const selectCard = (setName, itemNumber) =>\r\n    ({\r\n        type: SELECT_CARD,\r\n        setName,\r\n        itemNumber\r\n    });\r\n\r\nexport const changeValue = (cardId) =>\r\n    ({\r\n        type: CHANGE_VALUE,\r\n        cardId\r\n    });\r\n\r\nexport const changeSuit = (cardId) =>\r\n    ({\r\n        type: CHANGE_SUIT,\r\n        cardId\r\n    });\r\n\r\nexport const changeCard = (cardId) =>\r\n    ({\r\n        type: CHANGE_CARD,\r\n        cardId\r\n    });\r\n\r\nexport const closeCardSelectionDialog = () =>\r\n    ({\r\n        type: CLOSE_CARD_SELECTION_DIALOG\r\n    });\r\n\r\nexport const tampCards = () =>\r\n    ({\r\n        type: TAMP_CARDS\r\n    });\r\n\r\nexport const updateCurrentDeck = () =>\r\n    ({\r\n        type: UPDATE_CURRENT_DECK\r\n    });\r\n\r\nexport const showRaund = () =>\r\n    ({\r\n        type: SHOW_RAUND\r\n    });\r\n\r\nexport const clearCardSet = (setNames) =>\r\n    ({\r\n        type: CLEAR_CARD_SET,\r\n        setNames\r\n    });\r\n\r\nexport const clearPokerHandsData = () =>\r\n    ({\r\n        type: CLEAR_POKER_HANDS_DATA,\r\n    });\r\n\r\nexport const updateProbabilities = (gamesData) =>\r\n    ({\r\n        type: UPDATE_PROBABILITIES,\r\n        gamesData\r\n    });\r\n\r\nexport const changePlayersNumber = (playersNumber) =>\r\n    ({\r\n        type: CHANGE_PLAYERS_NUMBER,\r\n        playersNumber\r\n    });\r\n\r\nexport default calcReducer;","import {connect} from \"react-redux\";\r\nimport Card from \"./Card\";\r\nimport {changeSuit, changeValue, selectCard} from \"../../../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nlet mapDispatchToProps = { //as Object\r\n    selectCard,\r\n    changeValue,\r\n    changeSuit\r\n};\r\n\r\nconst CardContainer = connect(mapStateToProps, mapDispatchToProps)(Card);\r\n\r\nexport default CardContainer;","import React from 'react';\r\nimport CardIMGContainer from \"../../CardIMG/CardIMGContainer\";\r\n//import s from '   '\r\n\r\nconst CardValue = (props) => {\r\n\r\n    let onClickHandler = (e) => {\r\n        props.changeValue(props.cardId);\r\n        props.changeCard(props.cardId);\r\n        props.updateCurrentDeck();\r\n        props.clearPokerHandsData();\r\n        e.stopPropagation();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div onClick={onClickHandler}>\r\n                <CardIMGContainer\r\n                    cardId={props.cardId}\r\n                    active={props.active}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardValue;\r\n","import {connect} from \"react-redux\";\r\nimport CardValue from \"./CardValue\";\r\nimport {changeCard, changeValue, clearPokerHandsData, updateCurrentDeck} from \"../../../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nlet mapDispatchToProps = { //as Object\r\n    changeValue,\r\n    changeCard,\r\n    updateCurrentDeck,\r\n    clearPokerHandsData\r\n\r\n};\r\n\r\nconst CardValueContainer = connect(mapStateToProps, mapDispatchToProps)(CardValue);\r\n\r\nexport default CardValueContainer;","import React from 'react';\r\nimport CardIMGContainer from \"../../CardIMG/CardIMGContainer\";\r\n\r\n\r\nconst CardSuit = (props) => {\r\n\r\n    let onClickHandler = (e) => {\r\n\r\n        props.changeSuit(props.cardId);\r\n\r\n        let currentSuit = (((props.cardValue / 4) - Math.trunc(props.cardValue / 4 - 0.25)) * 4 + 52);\r\n\r\n        if (props.currentCardDeck.indexOf(props.cardValue + (props.cardId - currentSuit)) === -1) {\r\n            props.changeValue(0);\r\n            props.changeCard(0);\r\n        } else {\r\n            props.changeValue(props.cardValue === 0 ? props.cardValue : props.cardValue + (props.cardId - currentSuit));\r\n            props.changeCard(props.cardValue === 0 ? props.cardValue : props.cardValue + (props.cardId - currentSuit));\r\n        }\r\n\r\n        props.updateCurrentDeck();\r\n        props.clearPokerHandsData();\r\n\r\n        e.stopPropagation();\r\n        debugger\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div onClick={onClickHandler}>\r\n                <CardIMGContainer\r\n                    cardId={props.cardId}\r\n                    active={props.active}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardSuit;\r\n","import {connect} from \"react-redux\";\r\nimport CardSuit from \"./CardSuit\";\r\nimport {\r\n    changeCard,\r\n    changeSuit,\r\n    changeValue,\r\n    clearPokerHandsData,\r\n    updateCurrentDeck\r\n} from \"../../../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        cardValue:\r\n            state.calc[state.calc.cardSelectionDialog.visibleFor]\r\n                .set[state.calc[state.calc.cardSelectionDialog.visibleFor].activeItem-1],\r\n        currentCardDeck: state.calc.currentCardDeck\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = { //as Object\r\n    changeValue,\r\n    changeSuit,\r\n    changeCard,\r\n    updateCurrentDeck,\r\n    clearPokerHandsData\r\n};\r\n\r\nconst CardSuiteContainer = connect(mapStateToProps, mapDispatchToProps)(CardSuit);\r\n\r\nexport default CardSuiteContainer;","import React from 'react';\r\nimport s from './CardSelection.module.css'\r\nimport CardValueContainer from \"./CardValue/CardValueContainer\";\r\nimport CardSuiteContainer from \"./CardSuit/CardSuiteContainer\";\r\n\r\n\r\nconst CardSelection = (props) => {\r\n\r\n    let onClickHandler = () => {\r\n        props.closeCardSelectionDialog();\r\n        props.tampCards();\r\n        props.showRaund();\r\n    };\r\n\r\n    let cardValue = (i) => {\r\n        return props.selectedSuit === 52\r\n            ? i * 4 - (52 - props.selectedSuit) - 3\r\n            : i * 4 - (52 - props.selectedSuit) - 4\r\n    };\r\n\r\n    let cardValues = [];\r\n\r\n    for (let i = 13; i >= 1; i--) {\r\n        cardValues.push(\r\n            <CardValueContainer\r\n                key={i}\r\n                active={props.selectedValue === cardValue(i)}\r\n                cardId={\r\n                    props.currentCardDeck.indexOf(cardValue(i)) !== -1 || props.selectedValue === cardValue(i)\r\n                        ? cardValue(i)\r\n                        : 0\r\n                }/>)\r\n    }\r\n\r\n    cardValues.push(\r\n        <CardValueContainer\r\n            key={0}\r\n            active={props.selectedValue === 0 && true}\r\n            cardId={0}/>);\r\n\r\n\r\n    let cardSuites = [];\r\n    for (let i = 53; i <= 56; i++) {\r\n        cardSuites.push(\r\n            <CardSuiteContainer\r\n                key={i}\r\n                active={ props.selectedSuit === 52 ? props.selectedSuit + 1 === i && true : props.selectedSuit === i && true}\r\n                cardId={i}/>)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            onClick={onClickHandler}\r\n            className={s.cardSelection}>\r\n            <div\r\n                className={s.close}\r\n            > </div>\r\n            <div className={s.cardValues}>\r\n                {cardValues}\r\n            </div>\r\n            <div className={s.cardSuits}>\r\n                {cardSuites}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardSelection;","import {connect} from \"react-redux\";\r\nimport CardSelection from \"./CardSelection\";\r\nimport {closeCardSelectionDialog, showRaund, tampCards} from \"../../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        selectedValue: state.calc.cardSelectionDialog.selectedValue,\r\n        selectedSuit: state.calc.cardSelectionDialog.selectedSuit,\r\n        currentCardDeck: state.calc.currentCardDeck\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps =  {\r\n    closeCardSelectionDialog,\r\n    tampCards,\r\n    showRaund\r\n};\r\n\r\nconst CardSelectionContainer = connect(mapStateToProps, mapDispatchToProps)(CardSelection);\r\n\r\nexport default CardSelectionContainer;","import React from 'react';\r\nimport s from './ClearBTN.module.css'\r\n\r\nconst ClearBTN = (props) => {\r\n    return (\r\n        <div\r\n            className={s.wrapper}\r\n            onClick={ () => {\r\n                if (!props.visibleFor) {\r\n                    props.clearCardSet(props.clearFor);\r\n                    props.updateCurrentDeck();\r\n                    props.clearPokerHandsData();\r\n                }\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClearBTN;","import {connect} from \"react-redux\";\r\nimport ClearBTN from \"./ClearBTN\";\r\nimport {clearCardSet, clearPokerHandsData, updateCurrentDeck} from \"../../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        visibleFor: state.calc.cardSelectionDialog.visibleFor\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = { //as Object\r\n    clearCardSet,\r\n    updateCurrentDeck,\r\n    clearPokerHandsData\r\n};\r\n\r\nconst ClearBTNContainer = connect(mapStateToProps, mapDispatchToProps)(ClearBTN);\r\n\r\nexport default ClearBTNContainer;","import React from 'react';\r\nimport s from './CommunityCards.module.css'\r\nimport CardContainer from \"./Card/CardContainer\";\r\nimport CardSelectionContainer from \"../../common/CardSelection/CardSelectionContainer\";\r\nimport ClearBTNContainer from \"../../common/ClearBTN/ClearBTNContainer\";\r\n\r\nconst CommunityCards = (props) => {\r\n\r\n    let cards = [];\r\n    for (let i = 1; i <= 5; i++) {\r\n        if ( props.communityCards.set[i-1] ) {\r\n            cards.push(\r\n                <CardContainer\r\n                    key={i}\r\n                    cardId={props.communityCards.set[i-1]}\r\n                    active={props.communityCards.activeItem === i && true}\r\n                    setName='communityCards'\r\n                    itemNumber={i}\r\n                />\r\n            )\r\n        } else {\r\n            cards.push(\r\n                <CardContainer\r\n                    key={i}\r\n                    cardId={0}\r\n                    active={props.communityCards.activeItem === i && true}\r\n                    setName='communityCards'\r\n                    itemNumber={i}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h3>Community cards</h3>\r\n            <div className={`${s.cardsWrapper} ${props.visibleFor === 'communityCards' && s.activeBlock}`}>\r\n                <div className={s.clearBtn}><ClearBTNContainer clearFor={['communityCards']}>clear</ClearBTNContainer></div>\r\n                {cards}\r\n            </div>\r\n            { props.visibleFor === 'communityCards' && <CardSelectionContainer />}\r\n            <p className={s.raund}>{props.raund}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CommunityCards;","import {connect} from \"react-redux\";\r\nimport CommunityCards from \"./CommunityCards\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        communityCards: state.calc.communityCards,\r\n        visibleFor: state.calc.cardSelectionDialog.visibleFor,\r\n        raund: state.calc.raund\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = {\r\n\r\n};\r\n\r\nconst CommunityCardsContainer = connect(mapStateToProps, mapDispatchToProps)(CommunityCards);\r\n\r\nexport default CommunityCardsContainer;","import React from 'react';\r\nimport CardIMGContainer from \"../../../common/CardIMG/CardIMGContainer\";\r\n//import s from '   '\r\n\r\nconst Card = (props) => {\r\n\r\n    let onClickHandler = () => {\r\n\r\n        props.selectCard(props.setName, props.itemNumber);\r\n        props.changeValue(props.cardId);\r\n        props.changeSuit( props.cardId === 0\r\n            ? 53\r\n            : ((props.cardId / 4) - Math.trunc(props.cardId / 4 - 0.25)) * 4 + 52);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='qwer' onClick={onClickHandler}>\r\n                <CardIMGContainer\r\n                    cardId={props.cardId}\r\n                    active={props.active}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import {connect} from \"react-redux\";\r\nimport Card from \"./Card\";\r\nimport {changeSuit, changeValue, selectCard} from \"../../../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {}\r\n};\r\n\r\nlet mapDispatchToProps = { //as Object\r\n    selectCard,\r\n    changeValue,\r\n    changeSuit\r\n};\r\n\r\nconst CardContainer = connect(mapStateToProps, mapDispatchToProps)(Card);\r\n\r\nexport default CardContainer;","import React from 'react';\r\nimport s from './YourHand.module.css'\r\nimport CardContainer from \"./Card/CardContainer\";\r\nimport CardSelectionContainer from \"../../common/CardSelection/CardSelectionContainer\";\r\nimport ClearBTNContainer from \"../../common/ClearBTN/ClearBTNContainer\";\r\n\r\nconst YourHand = (props) => {\r\n\r\n    let cards = [];\r\n    for (let i = 1; i <= 2; i++) {\r\n        if ( props.handCards.set[i-1] > 0 ) {\r\n            cards.push(\r\n                <CardContainer\r\n                    key={i}\r\n                    cardId={props.handCards.set[i-1]}\r\n                    active={props.handCards.activeItem === i && true}\r\n                    setName='handCards'\r\n                    itemNumber={i}\r\n                />\r\n            )\r\n        } else {\r\n            cards.push(\r\n                <CardContainer\r\n                    key={i}\r\n                    cardId={0}\r\n                    active={props.handCards.activeItem === i && true}\r\n                    setName='handCards'\r\n                    itemNumber={i}\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h3>Your hand</h3>\r\n            <div className={`${s.cardsWrapper} ${props.visibleFor === 'handCards' && s.activeBlock}`}>\r\n                <div className={s.clearBtn}><ClearBTNContainer clearFor={['handCards']}>clear</ClearBTNContainer></div>\r\n                {cards}\r\n            </div>\r\n            { props.visibleFor === 'handCards' && <CardSelectionContainer />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default YourHand;","import {connect} from \"react-redux\";\r\nimport YourHand from \"./YourHand\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        handCards: state.calc.handCards,\r\n        visibleFor: state.calc.cardSelectionDialog.visibleFor\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = {\r\n\r\n};\r\n\r\nconst YourHandContainer = connect(mapStateToProps, mapDispatchToProps)(YourHand);\r\n\r\nexport default YourHandContainer;","import React from 'react';\r\nimport s from './Probability.module.css';\r\nimport pokerCalc from 'poker-calc';\r\nimport {pull, pullAll} from \"lodash\";\r\n\r\nclass Probability extends React.Component {\r\n\r\n    getRandomInt = (max) => {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    };\r\n\r\n    cards = {\r\n        cardTypes: [\r\n            '2H', '2C', '2D', '2S',\r\n            '3H', '3C', '3D', '3S',\r\n            '4H', '4C', '4D', '4S',\r\n            '5H', '5C', '5D', '5S',\r\n            '6H', '6C', '6D', '6S',\r\n            '7H', '7C', '7D', '7S',\r\n            '8H', '8C', '8D', '8S',\r\n            '9H', '9C', '9D', '9S',\r\n            '10H', '10C', '10D', '10S',\r\n            'JH', 'JC', 'JD', 'JS',\r\n            'QH', 'QC', 'QD', 'QS',\r\n            'KH', 'KC', 'KD', 'KS',\r\n            'AH', 'AC', 'AD', 'AS',\r\n        ],\r\n        boardCards: [],\r\n        playerCards: [\r\n            {playerId: 1, cards: []},\r\n        ],\r\n        currentCardDeck: []\r\n    };\r\n\r\n    gamesData = {\r\n        totalGames: 0,\r\n        High_Card: 0,\r\n        One_Pair: 0,\r\n        Two_Pair: 0,\r\n        Three_of_a_Kind: 0,\r\n        Straight: 0,\r\n        Flush: 0,\r\n        Full_House: 0,\r\n        Four_of_a_Kind: 0,\r\n        Straight_Flush: 0,\r\n        Royal_Flush: 0\r\n    };\r\n\r\n\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n\r\n    //////////////////////////////////////////////\r\n    //////////////////////////////////////////////\r\n    setupCards = () => {\r\n        let setupCurrentCardDeck = () => {\r\n            this.cards.currentCardDeck = [...this.cards.cardTypes];\r\n        };\r\n        let setupBoardCards = () => {\r\n            this.cards.boardCards = [];\r\n            for (let i = 0; i < this.props.communityCardSet.length ; i++) {\r\n                this.cards.boardCards.push(this.cards.cardTypes[this.props.communityCardSet[i]-1]);\r\n            }\r\n            pullAll(this.cards.boardCards, [null, undefined]);\r\n        };\r\n        let setupPlayerCards = () => {\r\n            this.cards.playerCards = [];\r\n            this.cards.playerCards.push({playerId: 0, cards: []});\r\n            for (let i = 0; i < this.props.handCardSet.length ; i++) {\r\n                this.cards.playerCards[0].cards.push(this.cards.cardTypes[this.props.handCardSet[i]-1]);\r\n            }\r\n            pullAll(this.cards.playerCards[0].cards, [null, undefined]);\r\n        };\r\n        let updateCurrentCardDeck = () => {\r\n            pullAll(this.cards.currentCardDeck,\r\n                this.cards.boardCards\r\n                    .concat(this.cards.playerCards[0].cards))\r\n        };\r\n        let addBoardCards = () => {\r\n            for (let i = this.cards.boardCards.length; i < 5 ; i++) {\r\n                this.cards.boardCards.push(\r\n                    getCard(this.cards.currentCardDeck[this.getRandomInt(this.cards.currentCardDeck.length)]));\r\n            }\r\n        };\r\n        let addPlayerCards = () => {\r\n            for (let i = this.cards.playerCards[0].cards.length; i < 2 ; i++) {\r\n                this.cards.playerCards[0].cards.push(\r\n                    getCard(this.cards.currentCardDeck[this.getRandomInt(this.cards.currentCardDeck.length)]));\r\n            }\r\n            for (let i = 1; i < this.props.playersNumber; i++) {\r\n                this.cards.playerCards.push({playerId: i, cards: []});\r\n\r\n                for (let j = 0; j < 2 ; j++) {\r\n                    this.cards.playerCards[i].cards.push(\r\n                        getCard(this.cards.currentCardDeck[this.getRandomInt(this.cards.currentCardDeck.length)]));\r\n                }\r\n            }\r\n        };\r\n        let getCard = (selectCard) => {\r\n            pull(this.cards.currentCardDeck, selectCard);\r\n            return selectCard;\r\n        };\r\n\r\n        setupCurrentCardDeck();\r\n        setupBoardCards();\r\n        setupPlayerCards();\r\n        updateCurrentCardDeck();\r\n        addBoardCards();\r\n        addPlayerCards();\r\n    };\r\n\r\n\r\n    playGamesAsync = (dispatcher) => {\r\n        let timers = [];\r\n        let playGame = (level = 0) => {\r\n\r\n            this.setupCards();\r\n            let game = pokerCalc.getHoldemWinner({\r\n                boardCards: this.cards.boardCards,\r\n                playerCards: this.cards.playerCards\r\n            }, {compactCards: true});\r\n            this.gamesData.totalGames ++;\r\n\r\n            let increase = game.length === 1 ? 1 : 0.5;\r\n\r\n            if(game[0].playerId === 0) {\r\n                switch (game[0].hand.handInfo.type) {\r\n                    case 'High Card':\r\n                        this.gamesData.High_Card += increase;\r\n                        break;\r\n                    case 'One Pair':\r\n                        this.gamesData.One_Pair += increase;\r\n                        break;\r\n                    case 'Two Pair':\r\n                        this.gamesData.Two_Pair += increase;\r\n                        break;\r\n                    case 'Three of a Kind':\r\n                        this.gamesData.Three_of_a_Kind += increase;\r\n                        break;\r\n                    case 'Straight':\r\n                        this.gamesData.Straight += increase;\r\n                        break;\r\n                    case 'Flush':\r\n                        this.gamesData.Flush += increase;\r\n                        break;\r\n                    case 'Full House':\r\n                        this.gamesData.Full_House += increase;\r\n                        break;\r\n                    case 'Four of a Kind':\r\n                        this.gamesData.Four_of_a_Kind += increase;\r\n                        break;\r\n                    case 'Straight Flush':\r\n                        this.gamesData.Straight_Flush += increase;\r\n                        break;\r\n                    case 'Royal Flush':\r\n                        this.gamesData.Royal_Flush += increase;\r\n                        break;\r\n                    default: break;\r\n                }\r\n            }\r\n\r\n            if (level < 99) {\r\n                timers.push(setTimeout(playGame,0, level+1));\r\n            } else {\r\n                for (let i = 0; i < timers.length; i++) {\r\n                    clearTimeout(timers[i]);\r\n                }\r\n                setTimeout(dispatcher, 0, this.gamesData);\r\n            }\r\n        };\r\n\r\n        playGame();\r\n    };\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n\r\n        this.setupCards();\r\n        for (let key in this.gamesData) this.gamesData[key] = 0;\r\n        this.props.isCalculations && this.playGamesAsync(this.props.updateProbabilities);\r\n    }\r\n\r\n    render() {\r\n\r\n        let pokerHands = [];\r\n        for (let i = 2; i <=11 ; i++) {\r\n            pokerHands.push(\r\n                <li\r\n                    key={i}\r\n                    className={s.pokerHand}>\r\n                    <span className={s.pokerHandName}>{this.props.pokerHands[i].viewName}</span>\r\n                    <span>{this.props.pokerHands[i].currentProb}%</span>\r\n                </li>\r\n            )\r\n        }\r\n\r\n        let selectOptions = [];\r\n        for (let i = 2; i <= 9 ; i++) {\r\n            this.props.playersNumber === i\r\n                ? selectOptions.push(<option value={i} selected>{i}</option>)\r\n                : selectOptions.push(<option value={i}>{i}</option>)\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div className={s.players}>\r\n                    <p>Calculate for</p>\r\n                    {/*<input name='playersCount' type='number' min='2' max='9' step='1' placeholder='5' defaultValue={this.props.playersNumber}/>*/}\r\n                    <select\r\n                        className={s.select}\r\n                        name=\"playersCount\"\r\n                        onChange={ (event) => {\r\n                            this.props.changePlayersNumber(event.target.value);\r\n                            this.props.clearPokerHandsData();\r\n                        }}\r\n                    >\r\n                        {selectOptions}\r\n                    </select>\r\n                    <span>players</span>\r\n                </div>\r\n                <h3 className={s.baseProb}>\r\n                    <span>winning</span>\r\n                    <span>{this.props.pokerHands[1].currentProb}%</span>\r\n                </h3>\r\n                <div>\r\n                    <h4>winning with</h4>\r\n                    <ul>\r\n                        {pokerHands}\r\n                    </ul>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Probability;","import {connect} from \"react-redux\";\r\nimport Probability from \"./Probability\";\r\nimport {changePlayersNumber, clearPokerHandsData, updateProbabilities} from \"../../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        pokerHands: state.calc.pokerHands,\r\n        playersNumber: state.calc.playersNumber,\r\n\r\n        communityCardSet: state.calc.communityCards.set,\r\n        handCardSet: state.calc.handCards.set,\r\n        isCalculations: state.calc.isCalculations\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = {\r\n    updateProbabilities,\r\n    changePlayersNumber,\r\n    clearPokerHandsData\r\n};\r\n\r\nconst ProbabilityContainer = connect(mapStateToProps, mapDispatchToProps)(Probability);\r\n\r\nexport default ProbabilityContainer;","import React from 'react';\r\nimport s from './Calc.module.css'\r\nimport CommunityCardsContainer from \"./CommunityCards/CommunityCardsContainer\";\r\nimport YourHandContainer from \"./YourHand/YourHandContainer\";\r\nimport ProbabilityContainer from \"./Probability/ProbabilityContainer\";\r\n\r\n\r\nclass Calc extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.initCardDeck();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.wrapper}>\r\n                <div className={s.calcWrapper}>\r\n                    <CommunityCardsContainer/>\r\n                    <YourHandContainer />\r\n                    <ProbabilityContainer />\r\n                    <div className={s.copyrights}>\r\n                        <p>© developed by Eugene Komarov 2020</p>\r\n                        <p>uses React, Redux, poker-calc libraries</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calc;","import {connect} from \"react-redux\";\r\nimport Calc from \"./Calc\";\r\nimport {initCardDeck, updateProbabilities} from \"../../redux/reducers/calc-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = {\r\n    initCardDeck,\r\n    updateProbabilities\r\n};\r\n\r\nconst CalcContainer = connect(mapStateToProps, mapDispatchToProps)(Calc);\r\n\r\nexport default CalcContainer;","import React from 'react';\nimport './App.css';\nimport CalcContainer from \"./components/Calc/CalcContainer\";\n\nfunction App() {\n  return (\n      <main>\n        <CalcContainer />\n      </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport calcReducer from \"./reducers/calc-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    calc: calcReducer\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nwindow.state=store.getState;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsWrapper\":\"CommunityCards_cardsWrapper__3GSo4\",\"raund\":\"CommunityCards_raund__2PAGx\",\"wrapper\":\"CommunityCards_wrapper__14z8i\",\"clearBtn\":\"CommunityCards_clearBtn__17BNx\",\"activeBlock\":\"CommunityCards_activeBlock__bubzR\"};"],"sourceRoot":""}